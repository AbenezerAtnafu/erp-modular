@using X.PagedList.Mvc.Core
@using X.PagedList
@using X.PagedList.Web.Common
@model X.PagedList.IPagedList<HRMS.Types.Family_RelationShip_Type>


@{
    ViewData["Title"] = "Family RelationShip Type List";
}
@{
    var searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"];
}
<div class="container px-1" style="position:initial;">
    <div class="card">
        <div class="card-header">
            <div class="">
                <h5>Family RelationShip Type List</h5>
                <span class="d-block m-t-5">The following is a list of Family RelationShip Type.</span>
            </div>
            <a class="btn btn-info float-right" asp-action="Create"><i class="feather icon-plus fa-fw"></i>Create New</a>
        </div>
        <div class="card-block table-border-style">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Description
                            </th>
                            <th>
                                Last Updated
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (@item.name != null && @item.name.Length > 10)
                                    {
                                        <h6 class="mb-1">@item.name.Substring(0, 10)...</h6>
                                    }
                                    else
                                    {
                                        <h6 class="mb-1">@Html.DisplayFor(modelItem => @item.name)</h6>
                                    }
                                </td>
                                <td>
                                    @if (@item.description != null && @item.description.Length > 10)
                                    {
                                        <p class="m-0">@item.description.Substring(0, 10)...</p>
                                    }
                                    else
                                    {
                                        <p class="m-0">@item.description</p>
                                    }
                                </td>
                                <td>
                                    <h6 class="text-muted"><i class="fas fa-circle text-c-green f-10 m-r-15"></i>@Html.DisplayFor(modelItem => item.updated_date)</h6>
                                </td>
                                <td class="float-right">
                                    <a onclick="deleteConf(@item.id)" class="text-danger ml-2" id="DeleteLink">
                                        <i class="feather icon-trash-2 fa-fw"></i>
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@item.id" class="text-success ml-2">
                                        <i class="feather icon-edit fa-fw"></i>
                                    </a>
                                    <a asp-action="Details" asp-route-id="@item.id" class="btn btn-outline-info ml-2">
                                        View
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="pagination">
                    <ul class="pagination justify-content-center">
                        <div class="pagination">
                            <ul class="pagination justify-content-center">
                                @if (Model.HasPreviousPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link prev-button" href="@Url.Action("Index", new { page = Model.PageNumber - 1 })">Previous</a>
                                    </li>
                                }



                                @if (Model.HasNextPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link next-button" href="@Url.Action("Index", new { page = Model.PageNumber + 1 })">Next</a>
                                    </li>
                                }
                            </ul>
                        </div>


                        @if (Model.PageNumber != 1)
                        {
                            <li class="page-item">
                                <a class="page-link first-button" href="@Url.Action("Index", new { page = 1 })">Go to the first page</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
